// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå frontend/src/pages/Addtype/Addtype.jsx
import { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import Navbar from "../../components/Sidebar";
import "../../styles/home.css";
import "../../styles/Sharestyles.css"; // ‡πÄ‡∏û‡∏¥‡πà‡∏° shared styles
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import styles from '../../styles/Addhome.module.css'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° module styles

export default function Addtype() {
  const [form, setForm] = useState({ 
    name: "",
    description: "",
    max_capacity: "",
    is_row_type: false
  });
  const [homeTypes, setHomeTypes] = useState([]);
  const navigate = useNavigate();

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
  const loadHomeTypes = async () => {
    try {
      const response = await axios.get("http://localhost:3001/api/home_types");
      setHomeTypes(response.data);
    } catch (error) {
      console.error("Error loading home types:", error);
    }
  };

  useEffect(() => {
    loadHomeTypes();
  }, []);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setForm({ 
      ...form, 
      [name]: type === 'checkbox' ? checked : value 
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!form.name.trim()) {
      toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô", {
        position: "top-right",
        autoClose: 3000,
        style: { background: '#ef4444', color: 'white' }
      });
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
    const exists = homeTypes.some(type => 
      type.name.toLowerCase() === form.name.trim().toLowerCase()
    );
    
    if (exists) {
      toast.error("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", {
        position: "top-right",
        autoClose: 3000,
        style: { background: '#ef4444', color: 'white' }
      });
      return;
    }
    
    try {
      const response = await axios.post("http://localhost:3001/api/home_types", {
        name: form.name.trim(),
        description: form.description.trim(),
        max_capacity: form.max_capacity ? parseInt(form.max_capacity) : null,
        is_row_type: form.is_row_type
      });

      toast.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", {
        position: "top-right",
        autoClose: 3000,
        style: { background: '#ffffffff', color: 'grey' }
      });
      
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
      setForm({ 
        name: "",
        description: "",
        max_capacity: "",
        is_row_type: false
      });
      
      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      loadHomeTypes();

    } catch (error) {
      console.error("Error:", error);
      
      let errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô";
      
      if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.response?.status === 400) {
        errorMessage = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
      } else if (error.response?.status === 500) {
        errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå";
      }
      
      toast.error(errorMessage, {
        position: "top-right",
        autoClose: 5000,
        style: { background: '#ef4444', color: 'grey' }
      });
    }
  };

  const handleDelete = async (id, name) => {
    if (!window.confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô "${name}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
      return;
    }

    try {
      await axios.delete(`http://localhost:3001/api/home_types/${id}`);
      
      toast.success("‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", {
        position: "top-right",
        autoClose: 3000,
        style: { background: '#ffffffff', color: 'grey' }
      });
      
      loadHomeTypes();
    } catch (error) {
      console.error("Error deleting home type:", error);
      
      let errorMessage = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏î‡πâ";
      if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      }
      
      toast.error(errorMessage, {
        position: "top-right",
        autoClose: 5000,
        style: { background: '#ef4444', color: 'white' }
      });
    }
  };

  return (
    <div className="dashboard-container">
      <Navbar />
      
      <div className="content-container">
        <div className="title-container">
          <div className="page-title">
            ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å
          </div>
        </div>
        
        <div className="main-content">
          {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô */}
          <div className="form-card">
            <h3 className="form-section-title">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</h3>
            
            <form onSubmit={handleSubmit} className="form-full-width">
              <div className="form-group">
                <label className="form-label">‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô <span className="required">*</span></label>
                <input
                  type="text"
                  name="name"
                  value={form.name}
                  onChange={handleChange}
                  className="form-input"
                  required
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î, ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"
                />
              </div>
              
              <div className="form-group">
                <label className="form-label">‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</label>
                <textarea
                  name="description"
                  value={form.description}
                  onChange={handleChange}
                  className="form-textarea"
                />
              </div>
              
              
              
              <div className={styles.buttonGroup}>
                <button type="submit" className={styles.btnPrimary}>
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô
                </button>
              </div>
            </form>
          </div>
          
          {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà */}
          <div className="form-card">
            <h3 className="form-section-title">
              ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ({homeTypes.length})
            </h3>
            
            <div className="list-container">
              {homeTypes.length === 0 ? (
                <div className="empty-state">
                  <div className="empty-state-icon">üè†</div>
                  ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô
                </div>
              ) : (
                homeTypes.map((type, index) => (
                  <div
                    key={type.id}
                    className={`list-item ${index % 2 === 0 ? 'even' : 'odd'}`}
                  >
                    <div className="list-item-content">
                      <div className="list-item-title">
                        {type.name}
                      </div>
                      {type.description && (
                        <div className="list-item-description">
                          {type.description}
                        </div>
                      )}
                      {type.max_capacity && (
                        <div className="list-item-meta">
                          ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {type.max_capacity} ‡∏´‡∏ô‡πà‡∏ß‡∏¢
                        </div>
                      )}
                    </div>
                    
                    <button
                      onClick={() => handleDelete(type.id, type.name)}
                      className="btn-danger btn-small"
                    >
                      ‡∏•‡∏ö
                    </button>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      </div>
      
      <ToastContainer
        position="top-right"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        style={{ zIndex: 9999 }}
      />
    </div>
  );
}